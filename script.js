const menuBtn = document.getElementById("menu-btn");
const navLinks = document.getElementById("nav-links");
const menuBtnIcon = menuBtn.querySelector("i");

menuBtn.addEventListener("click", (e) => {
  navLinks.classList.toggle("open");

  const isOpen = navLinks.classList.contains("open");
  menuBtnIcon.setAttribute("class", isOpen ? "ri-close-line" : "ri-menu-line");
});

navLinks.addEventListener("click", (e) => {
  navLinks.classList.remove("open");
  menuBtnIcon.setAttribute("class", "ri-menu-line");
});

const scrollRevealOption = {
  distance: "50px",
  origin: "bottom",
  duration: 1000,
};

ScrollReveal().reveal(".header__container h1", {
  ...scrollRevealOption,
});
ScrollReveal().reveal(".header__container .section__description", {
  ...scrollRevealOption,
  delay: 500,
});
ScrollReveal().reveal(".header__link", {
  ...scrollRevealOption,
  delay: 1000,
});

ScrollReveal().reveal(".shop__card", {
  ...scrollRevealOption,
  interval: 500,
});

ScrollReveal().reveal(".about__content .section__header", {
  ...scrollRevealOption,
});
ScrollReveal().reveal(".about__content .section__description", {
  ...scrollRevealOption,
  delay: 500,
  interval: 500,
});
ScrollReveal().reveal(".about__stats", {
  ...scrollRevealOption,
  delay: 1500,
});

const swiper = new Swiper(".swiper", {
  loop: true,
  slidesPerView: "auto",
  spaceBetween: 20,
});

ScrollReveal().reveal(".banner__container p", {
  duration: 1000,
  interval: 500,
});



// ------------------------ File Upload Handling --------------------------------

document.getElementById("fileInput").addEventListener("change", handleFile, false);

    function handleFile(e) {
      const file = e.target.files[0];
      const reader = new FileReader();
      const ext = file.name.split(".").pop().toLowerCase();

      if (ext === "csv") {
        reader.onload = (evt) => {
          const text = evt.target.result;
          const rows = text.split("\n").map(r => r.trim()).filter(r => r).map(r => r.split(",").map(c => c.trim()));
          if (rows.length > 0) {
            processData(rows);
          }
        };
        reader.readAsText(file);
      } else if (ext === "xlsx") {
        reader.onload = (evt) => {
          const data = new Uint8Array(evt.target.result);
          const workbook = XLSX.read(data, { type: "array" });
          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
          const json = XLSX.utils.sheet_to_json(firstSheet, { header: 1, raw: false }); 
          processData(json);
        };
        reader.readAsArrayBuffer(file);
      } else {
        alert("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx");
      }
    }

    function processData(data) {
      if (data.length === 0) {
        document.getElementById("output").innerHTML = "<p style='color:red;'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå</p>";
        return;
      }
      
      const headers = data[0].map(h => String(h).trim());
      const processIndex = headers.findIndex(h => h.toLowerCase().includes("process"));
      const arrivalIndex = headers.findIndex(h => h.toLowerCase().includes("arrival"));
      const burstIndex = headers.findIndex(h => h.toLowerCase().includes("burst"));
      
      if (processIndex === -1 || arrivalIndex === -1 || burstIndex === -1) {
        document.getElementById("output").innerHTML = "<p style='color:red;'>‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ 'Process', 'Arrival', ‡πÅ‡∏•‡∏∞ 'Burst' ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>";
        return;
      }

      // ‡πÇ‡∏Ñ‡∏•‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
      let processes = data.slice(1)
        .filter(r => r.length > Math.max(processIndex, arrivalIndex, burstIndex))
        .map(r => ({
          name: String(r[processIndex]).trim(),
          arrival: parseInt(r[arrivalIndex]),
          burst: parseInt(r[burstIndex]),
          done: false
        }))
        .filter(p => !isNaN(p.arrival) && !isNaN(p.burst) && p.burst > 0);

      if (processes.length === 0) {
        document.getElementById("output").innerHTML = "<p style='color:red;'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á</p>";
        return;
      }

      let time = 0;
      let completed = [];
      let totalBurst = processes.reduce((a,p)=>a+p.burst,0);

      while (completed.length < processes.length) {
        
        // 1. ‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏µ‡πà "‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß" ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        let available = processes.filter(p => !p.done && p.arrival <= time);

        if (available.length === 0) {
            // **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Idle Time (‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á)**
            let nextArrivalProcesses = processes.filter(p => !p.done);
            if (nextArrivalProcesses.length > 0) {
                // ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà arrival time ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                let nextArrival = Math.min(...nextArrivalProcesses.map(p => p.arrival));
                if(nextArrival > time) {
                    time = nextArrival;
                    continue; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ available process ‡πÉ‡∏´‡∏°‡πà
                }
            } else {
                break; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß
            }
            
            // Re-check available processes at the new time (‡∏ñ‡πâ‡∏≤ time ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
            available = processes.filter(p => !p.done && p.arrival <= time);
        }
        
        // 2. **LCFS Selection: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™**
        available.sort((a, b) => {
            // 1. Primary: LCFS (Arrival Time ‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ - ‡∏°‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            if (a.arrival !== b.arrival) {
                return b.arrival - a.arrival; 
            }
            
            // 2. Secondary (Tie-breaker): Burst Time ‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
            return b.name.localeCompare(a.name);
            
            // 3. Tertiary (Final Tie-breaker): ‡∏ä‡∏∑‡πà‡∏≠ Process 
            return a.name.localeCompare(b.name);
        });

        let chosen = available[0]; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î (‡∏°‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î/Burst ‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î)

        // 3. **Non-preemptive Execution**
        chosen.start = time; 
        chosen.finish = time + chosen.burst;
        chosen.tat = chosen.finish - chosen.arrival;
        chosen.wait = chosen.start - chosen.arrival;
        chosen.rt = chosen.wait;
        chosen.done = true;
        completed.push(chosen);
        time = chosen.finish; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      }

      // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
      let avgTAT = completed.reduce((a,p)=>a+p.tat,0)/completed.length;
      let avgWT ¬†= completed.reduce((a,p)=>a+p.wait,0)/completed.length;
      let avgRT ¬†= completed.reduce((a,p)=>a+p.rt,0)/completed.length;
      let makespan = completed.length > 0 ? Math.max(...completed.map(p=>p.finish)) : 0;
      
      // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Utilization ‡πÅ‡∏•‡∏∞ Throughput
      let cpuUtil = (makespan > 0) ? (totalBurst/makespan*100).toFixed(2) : 0.00;
      let throughput = (makespan > 0) ? (completed.length/makespan).toFixed(3) : 0.000;

// ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
let html = "<h3>üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3><table><tr><th>Process</th><th>Arrival</th><th>Burst</th><th>Start</th><th>Finish</th><th>TAT</th><th>WT</th><th>RT</th></tr>";
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
completed.sort((a,b)=>a.start-b.start).forEach(p=>{
  html += `<tr><td>${p.name}</td><td>${p.arrival}</td><td>${p.burst}</td><td>${p.start}</td><td>${p.finish}</td><td>${p.tat}</td><td>${p.wait}</td><td>${p.rt}</td></tr>`;
});
html += "</table>";

// ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
html += `<div class='result-box'>
  Avg TAT = ${avgTAT.toFixed(2)}<br>
  Avg WT = ${avgWT.toFixed(2)}<br>
  Avg RT = ${avgRT.toFixed(2)}<br>
  CPU Utilization = ${cpuUtil}%<br>
  Throughput = ${throughput} process/unit time
</div>`;

// ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Gantt
html += `
  <div id="gantt-wrap">
    <h3 id="gantt-title">üß± Gantt Chart</h3>
    <div id="gantt" class="gantt"><div class="gantt-row" id="gantt-row"></div></div>
    <div id="gantt-axis" class="gantt-axis"></div>
  </div>
`;

document.getElementById("output").innerHTML = html;

// ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå Gantt ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
renderGantt(completed, makespan);
renderAxis(makespan);

    }
// ------------------------ End of File Upload Handling -------------------------

/** ================== Helpers: Gantt Renderer ================== */
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á segments ‡∏£‡∏ß‡∏°‡∏ä‡πà‡∏ß‡∏á Idle ‡∏î‡πâ‡∏ß‡∏¢
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô % ‡∏Ç‡∏≠‡∏á makespan ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° responsive
 */
function renderGantt(tasks, makespan) {
  const row = document.getElementById("gantt-row");
  if (!row || makespan <= 0) return;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå segments (‡∏£‡∏ß‡∏° idle)
  const segments = [];
  let cursor = 0;

  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
  const items = [...tasks].sort((a,b)=>a.start - b.start);

  items.forEach((p, i) => {
    // Idle ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏£‡∏Å/‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if (p.start > cursor) {
      segments.push({
        type: "idle",
        label: `Idle ${cursor}‚Üí${p.start}`,
        start: cursor,
        end: p.start
      });
    }
    // ‡∏ï‡∏±‡∏ß‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
    segments.push({
      type: "proc",
      label: `${p.name} ${p.start}‚Üí${p.finish}`,
      start: p.start,
      end: p.finish
    });
    cursor = p.finish;
  });

  // Idle ‡∏ó‡πâ‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡∏õ‡∏Å‡∏ï‡∏¥ makespan = last finish ‡∏à‡∏∂‡∏á‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î)
  if (cursor < makespan) {
    segments.push({
      type: "idle",
      label: `Idle ${cursor}‚Üí${makespan}`,
      start: cursor,
      end: makespan
    });
  }

  // ‡∏ß‡∏≤‡∏î DOM
  row.innerHTML = "";
  segments.forEach(seg => {
    const dur = seg.end - seg.start;
    if (dur <= 0) return;

    const widthPct = (dur / makespan) * 100;
    const div = document.createElement("div");
    div.className = `gantt-seg ${seg.type}`;
    div.style.width = widthPct + "%";
    div.title = seg.label; // tooltip

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á (‡∏¢‡πà‡∏≠‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô)
    div.textContent = seg.type === "proc" ? seg.label.split(" ")[0] : "Idle";
    row.appendChild(div);
  });
}

/**
 * ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° tick ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
 */
function renderAxis(makespan) {
  const axis = document.getElementById("gantt-axis");
  const gantt = document.getElementById("gantt");
  if (!axis || !gantt || makespan <= 0) return;

  axis.innerHTML = "";

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tick ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 6‚Äì12 ‡∏à‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ï‡∏±‡∏ß
  const approxTicks = Math.min(12, Math.max(6, Math.floor(gantt.clientWidth / 80)));
  const stepRaw = makespan / approxTicks;

  // ‡∏õ‡∏£‡∏±‡∏ö step ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç "‡∏™‡∏ß‡∏¢‡πÜ" (1,2,5,10,20,...)
  const pow10 = Math.pow(10, Math.floor(Math.log10(stepRaw)));
  const candidates = [1, 2, 5, 10];
  let step = pow10;
  for (let c of candidates) {
    const s = c * pow10;
    if (s >= stepRaw) { step = s; break; }
  }

  for (let t = 0; t <= makespan + 1e-9; t += step) {
    const pct = (t / makespan) * 100;
    const tick = document.createElement("div");
    tick.className = "tick";
    tick.style.left = pct + "%";
    tick.textContent = Math.round(t);
    axis.appendChild(tick);
  }

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏ä‡∏ß‡πå‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (makespan) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πä‡∏∞
  const endTick = document.createElement("div");
  endTick.className = "tick";
  endTick.style.left = "100%";
  endTick.textContent = Math.round(makespan);
  axis.appendChild(endTick);
}
